<html>
<head>
<title>Simple Radar Chart</title>
<style>

svg {

	font-family:Arial;
}

.axis {
    shape-rendering: crispEdges;
}

.axis line {
    stroke: #000000;
    stroke-width: 1px;
}

.axis .ticks line {
    stroke: #4F4F4F;
    stroke-width: 1px;
}

.axis .ticks line.minor{
    stroke: #CCCCCC;
    stroke-width:1px;
}

.legend text{
	fill:#ddd;
	padding:10px;	
	font-size:10;
	font-family:Arial;
}

</style>
<script src="js/d3.min.js"></script>
<script>
var series = [],
		data,
		dimensions, 
		lgroups,
    hours,
    minVal,
    maxVal,
    w = 700,
    h = 700,
    vizPadding = {
        top: 20,
        right: 200,
        bottom: 40,
        left: 120
    },
    radius,
    radiusLength,
    ruleColor = "#CCC";
    
var color = d3.scale.category20();    

var loadViz = function(){

	d3.tsv("data/effective-group-interactions.tsv", function(error, the_data) {
		data = the_data;
  	loadData(data);
  	buildBase();
  	setScales();
  	addAxes();
  	draw();
	});  
};

var loadData = function(data){
    dimensions = [
    	"Participation", 
    	"Contribution", 
    	"Equal Participation", 
    	"Equal Role Fullfillment", 
    	"Activity Rhythm", 
    	"Reciprocal Perception",  
    	"Reciprocal Contribution"];
 
    var lgroups = data;
    data.forEach(function(d, i) {
			series[i] = [ 
				parseInt(d.participation), 
				parseInt(d.annotations), 
				parseInt(d.equal), 
				parseInt(d.role), 
				parseInt(d.rhythm), 
				parseInt(d.foreign), 
				parseInt(d.foreigncontributions) 
			];
		});
		// normalize values
		var MAX = series[0]; 
		series.splice(0,1); 
		for(var i=0; i < series.length; i++){
			series[i][0] = (series[i][0] / MAX[0]) * 100;
			series[i][1] = (series[i][1] / MAX[1]) * 100;
			series[i][2] = 100 - (series[i][2] / MAX[2]) * 100; // inverted
			series[i][3] = 100 - (series[i][3] / MAX[3]) * 100; // inverted
			series[i][4] = (series[i][4] / MAX[4]) * 100;
			series[i][5] = (series[i][5] / MAX[5]) * 100;
			series[i][6] = (series[i][6] / MAX[6]) * 100; // mean
			//to complete the radial lines
			series[i].push(series[i][0]); 
		}
		// adjust the number of radial lines
    hours = [];
    for (i = 0; i < 7; i++) {
        hours[i] = i; //in case we want to do different formatting
    }
    minVal = 0; //d3.min(mergedArr);
    maxVal = 100;//d3.max(mergedArr);
    //give 5% of range as buffer to top
    maxVal = maxVal + ((maxVal - minVal) * 0.05);

    
};

var buildBase = function(){
    var viz = d3.select("#viz")
        .append('svg:svg')
        .attr('width', w)
        .attr('height', h)
        .attr('class', 'vizSvg');

    viz.append("svg:rect")
        .attr('id', 'axis-separator')
        .attr('x', 0)
        .attr('y', 0)
        .attr('height', 0)
        .attr('width', 0)
        .attr('height', 0);
    
    vizBody = viz.append("svg:g")
        .attr('id', 'body');
 /*        
         // menu   
   var legend2 = vizBody.selectAll(".legend2")
      .data([1, 2,3,4,5,6,7,8])
    .enter().append("svg:g")
      .attr("class", "legend2")
      .attr("transform", function(d, i) { return "translate(60," + i * 20 + ")"; });

  legend2.append("svg:rect")
      .attr("x", w - 18)
      .attr("width", 18)
      .attr("height", 18)
      .style("fill", function(d){ return color(d); });
	
	var function_arr = ['0','0','0','Popcorn Maker', 'Add tag/toc/comment', 'Assessment', 'correct', 'wrong', 'ass_finish'];
	
  legend2.append("svg:text")
      .attr("x", w - 24)
      .attr("y", 9)
      .attr("dy", ".35em")
      .style("text-anchor", "end")
      .text(function(d) {  return function_arr[d]; });
  */   
      
};

setScales = function () {
  var heightCircleConstraint,
      widthCircleConstraint,
      circleConstraint,
      centerXPos,
      centerYPos;

  //need a circle so find constraining dimension
  heightCircleConstraint = h - vizPadding.top - vizPadding.bottom;
  widthCircleConstraint = w - vizPadding.left - vizPadding.right;
  circleConstraint = d3.min([
      heightCircleConstraint, widthCircleConstraint]);

  radius = d3.scale.linear().domain([minVal, maxVal])
      .range([0, (circleConstraint / 2)]);
  radiusLength = radius(maxVal);

  //attach everything to the group that is centered around middle
  centerXPos = widthCircleConstraint / 2 + vizPadding.left;
  centerYPos = heightCircleConstraint / 2 + vizPadding.top;

  vizBody.attr("transform",
      "translate(" + centerXPos + ", " + centerYPos + ")");
};

addAxes = function () {
  var radialTicks = radius.ticks(5),
      i,
      circleAxes,
      lineAxes;

  vizBody.selectAll('.circle-ticks').remove();
  vizBody.selectAll('.line-ticks').remove();

  circleAxes = vizBody.selectAll('.circle-ticks')
      .data(radialTicks)
      .enter().append('svg:g')
      .attr("class", "circle-ticks");

  circleAxes.append("svg:circle")
      .attr("r", function (d, i) {
          return radius(d);
      })
      .attr("class", "circle")
      .style("stroke", ruleColor)
      .style("fill", "none");

  circleAxes.append("svg:text")
      .attr("text-anchor", "middle")
      .attr("dy", function (d) {
          return -1 * radius(d);
      });
     //.text(String);

  lineAxes = vizBody.selectAll('.line-ticks')
      .data(hours)
      .enter().append('svg:g')
      .attr("transform", function (d, i) {
          return "rotate(" + ((i / hours.length * 360) - 90) +
              ")translate(" + radius(maxVal) + ")";
      })
      .attr("class", "line-ticks");

  lineAxes.append('svg:line')
      .attr("x2", -1 * radius(maxVal))
      .style("stroke", ruleColor)
      .style("fill", "none");

  lineAxes.append('svg:text')
      .text(function(d){ return dimensions[d]; } )
      .attr("text-anchor", function(d, i){
      	return (i / hours.length * 360) < 180 ? "start" : "end";
      })
      .attr('class', 'legend')
      .attr('font-size', 12)
      .attr("transform", function (d, i) {
      		var x = (i / hours.length * 360);
      		var y = 90*(i / hours.length * 360) +90;
      		 
          return x < 180 ? "rotate("+y+")" : "rotate("+y+")";
      });
   
 
};

var draw = function () {
  var groups,
      lines,
      linesToUpdate,
      legend;

  highlightedDotSize = 4;

  groups = vizBody.selectAll('.series')
      .data(series);
  groups.enter().append("svg:g")
      .attr('class', 'series')
      .style('fill', function (d, i) { 
      	return color(i); 
      })
      .style('stroke', function (d, i) { 
      	return color(i);
      });
  groups.exit().remove();

	// ?? 
  groups.selectAll(".curr-point")
      .data(function (d) {
          return [d[0]];
      })
      .enter().append("svg:circle")
      .attr("class", "curr-point")
      .attr("r", 0);

  groups.selectAll(".clicked-point")
      .data(function (d) {
          return [d[0]];
      })
      .enter().append("svg:circle")
      .attr('r', 0)
      .attr("class", "clicked-point");

  lines = groups.append('svg:path')
		.attr("class", "line")
  	.attr("d", d3.svg.line.radial()
      .radius(function (d) {
          return radius(d);
      })
      .angle(function (d, i) {  
          if (i === hours.length) { 
              i = 0;  
          } //close the line
          return (i / hours.length) * 2 * Math.PI;
      }))
      .style("stroke", function(d,i){ 
      	if(i===0){ 
      		return "#000";// mean 
      	}else if(i==18 || i == 17){ // conreol group
      		return "red";
      	}
      	//else if(i==2 || i==3 || i==7 || i==11 || i==14){ //over all effectiv:  2, 3, 7, 11, 14 
      		return "#777";
      	//} 
      	
      	// emphasize mean value
      	return "#555"//color(i); 
      })
      .style("stroke-dasharray", function(d,i){
      	 
      	if (i==0){ 
      		return 0;
      	} 
      	return 4;
      	if(i==4){ // effectiv: 4
      		return 0;
      	}else if(i==2 || i==3 || i==7 || i==11 || i==14){ //over all effectiv:  2, 3, 7, 11, 14 
      		return 0;
      	} 
      	
      })
      .style("stroke-width", function(d,i){
      	
      	if(i===0 ){ return 5; } // emphasize mean value
      	return 2; 
      })
      .style("fill", "none");
 
 // legend     
   var names = ["Eulersche Touren und hamiltonsche Graphen", "Just in Time Manufacturing","Chinese Postman Problem","Location Desicions","Traveling Salesperson Problem","Warehousemanagementsysteme","Grundlagen der Produktion und Logistik","Grundlagen der Produktion und Logistik"]
   var leg = groups.append("svg:text")
   		.data(lgroups)
      .attr("x", 500)
      .attr("y", function(d, i){ return i*20;})
      .attr("dy", ".35em")
      .style("text-anchor", "end")
      .style("stroke", function(d){ return color(parseInt(d.group-1)); })
      .style("fill", function(d){ return color(parseInt(d.group-1)); });
     // .text(function(d) { return ""+names[d.group-1]; });   
      
      
 
      
};



</script>
</head>
<body><h1>Simple Radar Chart</h1>
<div id="viz"></div>
<script>loadViz();</script>
</body>
</html>

{
  "name": "prerender-node",
  "version": "2.0.0",
  "description": "express middleware for serving prerendered javascript-rendered pages for SEO",
  "author": {
    "name": "Todd Hooper"
  },
  "license": "MIT",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/prerender/prerender-node"
  },
  "keywords": [
    "angular",
    "backbone",
    "emberjs",
    "seo"
  ],
  "devDependencies": {
    "mocha": "~1.13.0",
    "nock": "^2.7.0",
    "sinon": "~1.7.3",
    "supertest": "^1.0.1"
  },
  "scripts": {
    "test": "./node_modules/.bin/mocha"
  },
  "dependencies": {
    "request": "~2.40.0"
  },
  "readme": "Prerender Node [![Stories in Ready](https://badge.waffle.io/prerender/prerender-node.png?label=ready&title=Ready)](https://waffle.io/prerender/prerender-node) [![Build Status](https://travis-ci.org/prerender/prerender-node.png)](https://travis-ci.org/prerender/prerender-node) [![NPM version](https://badge.fury.io/js/prerender-node.png)](http://badge.fury.io/js/prerender-node)\n===========================\n\nGoogle, Facebook, Twitter, Yahoo, and Bing are constantly trying to view your website... but they don't execute JavaScript. That's why we built Prerender. Prerender is perfect for AngularJS SEO, BackboneJS SEO, EmberJS SEO, and any other JavaScript framework.\n\nThis middleware intercepts requests to your Node.js website from crawlers, and then makes a call to the (external) Prerender Service to get the static HTML instead of the JavaScript for that page.\n\nPrerender adheres to google's `_escaped_fragment_` proposal, which we recommend you use. It's easy:\n- Just add &lt;meta name=\"fragment\" content=\"!\"> to the &lt;head> of all of your pages\n- If you use hash urls (#), change them to the hash-bang (#!)\n- That's it! Perfect SEO on JavaScript pages.\n\nvia npm:\n\n    $ npm install prerender-node --save\n\nAnd when you set up your express app, add:\n\n```js\napp.use(require('prerender-node'));\n```\n\nor if you have an account on [prerender.io](http://prerender.io) and want to use your token:\n\n```js\napp.use(require('prerender-node').set('prerenderToken', 'YOUR_TOKEN'));\n```\n\n`Note` If you're testing locally, you'll need to run the [prerender server](https://github.com/prerender/prerender) locally so that it has access to your server.\n\nThis middleware is tested with Express3 and Express4, but has no explicit dependency on either.\n\n## Testing\n\nIf your URLs use a hash-bang:\n\n\tIf you want to see `http://localhost:3000/#!/profiles/1234`\n\tThen go to `http://localhost:3000/?_escaped_fragment_=/profiles/1234`\n\nIf your URLs use push-state:\n\n\tIf you want to see `http://localhost:3000/profiles/1234`\n\tThen go to `http://localhost:3000/profiles/1234?_escaped_fragment_=`\n\n## How it works\n1. The middleware checks to make sure we should show a prerendered page\n\t1. The middleware checks if the request is from a crawler (`_escaped_fragment_` or agent string)\n\t2. The middleware checks to make sure we aren't requesting a resource (js, css, etc...)\n\t3. (optional) The middleware checks to make sure the url is in the whitelist\n\t4. (optional) The middleware checks to make sure the url isn't in the blacklist\n2. The middleware makes a `GET` request to the [prerender service](https://github.com/prerender/prerender) (phantomjs server) for the page's prerendered HTML\n3. Return that HTML to the crawler\n\n# Customization\n\n### Whitelist\n\nWhitelist a single url path or multiple url paths. Compares using regex, so be specific when possible. If a whitelist is supplied, only urls containing a whitelist path will be prerendered.\n```js\napp.use(require('prerender-node').whitelisted('^/search'));\n```\n```js\napp.use(require('prerender-node').whitelisted(['/search', '/users/.*/profile']));\n```\n\n### Blacklist\n\nBlacklist a single url path or multiple url paths. Compares using regex, so be specific when possible. If a blacklist is supplied, all url's will be prerendered except ones containing a blacklist path.\n```js\napp.use(require('prerender-node').blacklisted('^/search'));\n```\n```js\napp.use(require('prerender-node').blacklisted(['/search', '/users/.*/profile']));\n```\n\n### beforeRender\n\nThis method is intended to be used for caching, but could be used to save analytics or anything else you need to do for each crawler request. If you return a string from beforeRender, the middleware will serve that to the crawler (with status `200`) instead of making a request to the prerender service. If you return an object the middleware will look for a `status` and `body` property (defaulting to `200` and `\"\"` respectively) and serve those instead.\n```js\napp.use(require('prerender-node').set('beforeRender', function(req, done) {\n\t// do whatever you need to do\n\tdone();\n}));\n```\n\n### afterRender\n\nThis method is intended to be used for caching, but could be used to save analytics or anything else you need to do for each crawler request. This method is a noop and is called after the prerender service returns HTML.\n```js\napp.use(require('prerender-node').set('afterRender', function(err, req, prerender_res) {\n\t// do whatever you need to do\n}));\n```\n\n### protocol\n\nOption to hard-set the protocol. Useful for sites that are available on both http and https.\n```js\napp.use(require('prerender-node').set('protocol', 'https'));\n```\n\n## Caching\n\nThis express middleware is ready to be used with [redis](http://redis.io/) or [memcached](http://memcached.org/) to return prerendered pages in milliseconds.\n\nWhen setting up the middleware, you can add a `beforeRender` function and `afterRender` function for caching.\n\nHere's an example testing a local redis cache:\n\n\t$ npm install redis\n\n```js\nvar redis = require(\"redis\"),\n\tclient = redis.createClient();\n\nprerender.set('beforeRender', function(req, done) {\n\tclient.get(req.url, done);\n}).set('afterRender', function(err, req, prerender_res) {\n\tclient.set(req.url, prerender_res.body)\n});\n```\n\nor\n\n```js\nvar redis = require(\"redis\"),\nclient = redis.createClient(),\ncacheableStatusCodes = {200: true, 302: true, 404: true};\n\nprerender.set('beforeRender', function(req, done) {\n  client.hmget(req.url, 'body', 'status', function (err, fields) {\n    if (err) return done(err);\n    done(err, {body: fields[0], status: fields[1]});\n  });\n}).set('afterRender', function(err, req, prerender_res) {\n  // Don't cache responses that might be temporary like 500 or 504.\n  if (cacheableStatusCodes[prerender_res.statusCode]) {\n    client.hmset(req.url, 'body', prerender_res.body, 'status', prerender_res.statusCode);\n  }\n});\n```\n\n\n## Using your own prerender service\n\nWe host a Prerender server at [prerender.io](http://prerender.io) so that you can work on more important things, but if you've deployed the prerender service on your own... set the `PRERENDER_SERVICE_URL` environment variable so that this middleware points there instead. Otherwise, it will default to the service already deployed by [prerender.io](http://prerender.io).\n\n\t$ export PRERENDER_SERVICE_URL=<new url>\n\nOr on heroku:\n\n\t$ heroku config:set PRERENDER_SERVICE_URL=<new url>\n\nAs an alternative, you can pass `prerender_service_url` in the options object during initialization of the middleware\n\n```js\napp.use(require('prerender-node').set('prerenderServiceUrl', '<new url>'));\n```\n\n## Contributing\n\nWe love any contributions! Feel free to create issues, pull requests, or middleware for other languages/frameworks!\n\n## License\n\nThe MIT License (MIT)\n\nCopyright (c) 2013 Todd Hooper &lt;todd@prerender.io&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/prerender/prerender-node/issues"
  },
  "_id": "prerender-node@2.0.0",
  "dist": {
    "shasum": "ba7900ebf8836bde565f3dd44e978fc818b5cad6"
  },
  "_from": "prerender-node@",
  "_resolved": "https://registry.npmjs.org/prerender-node/-/prerender-node-2.0.0.tgz"
}
